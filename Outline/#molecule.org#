#+BEGIN_SRC python :exports results 
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

k = 8.61733e-5      # eV /K
h = 4.13566766e-15  # eV s
eVtokJ = 96.485332
autoeV= 27.212      # eV
Nav = 6.022e23      # Avogadro's number 
amutoeVc2 = 931494095.17 # convert amu to eV/c^2
R0 = k * eVtokJ * 1000.       # gas constant in J/mol K
c = 299792458 # m / s

class Molecule(object):
    def __init__(self, name, mass, energy, rot, vib, helmholtz):
        self.name = name
        self.mass = mass
        self.energy = energy
        self.rot = rot
        self.vib = vib
        self.helmholtz = helmholtz

    def Hello(self):
        return "Hello {}".format(self.name)

    def Lambda(self, T):
        m = self.mass * amutoeVc2
        return h/np.sqrt(2*np.pi*m*k*T)*c

    def qtrans(self,T):  #  mole/m^3
        m = self.mass * amutoeVc2
        l = h/np.sqrt(2*np.pi*m*k*T)*c
        return (1./Nav)*(1./l)**3

    def qrot(self,T):
        if self.rot[1] > 0:
            return np.sqrt((np.pi*(T/self.rot[0])*(T/self.rot[1])*(T/self.rot[2])))
        else:
            return T/self.rot[0]

    def qvib(self,T):
        qvib = 1
        for mode in self.vib:
            qvib = qvib*(1.-np.exp(-mode/T))**-1
        return qvib

    def ZPE(self):
        ZPE=0.
        for mode in self.vib:
            ZPE = ZPE + mode
        return ZPE * (0.5)*k

    def Utrans(self,T):
        return 1.5*k*T

    def Urot(self,T):
        return 1.5*k*T

    def Uvib(self,T):
        Uvib=0.
        for mode in self.vib:
            Uvib=Uvib+k*(mode/(np.exp(mode/T)-1.0))
        return Uvib

# Fundamental relationships
def A(q):
   return -k*T*np.log(q)

def S(A,U,T):
   return (U - A)/T

def Delta(nu,A):
    return np.dot(nu,A)

Ethane = Molecule("Ethane", 30.04695, -79.8304174812, [3.84821, 0.95472, 0.95472], [450.15,  1196.99,  1196.99,  1453.24,  1777.11, 1777.12,  2060.75,  2091.81,  2204.14,  2204.14, 2212.26,  2212.26,  4385.10,  4386.31,  4459.07, 4459.07,  4494.15,  4494.15],[])

Ethylene = Molecule("Ethylene", 28.0313, -78.5874582996, [7.05282, 1.44180, 1.19708], [1201.68,  1375.63,  1403.93,  1539.30,  1795.67, 2008.40,  2150.27,  2475.38,  4535.29,  4557.52, 4636.49,  4673.24], [])

VA = Molecule("Vinyl alcohol", 44., -153.802227784, [3.06869, 0.49808, 0.42852],[342.12,   692.39,  1032.15,  1198.36,  1386.62, 1411.99,  1670.11,  1880.98,  1967.27,  2101.01, 2532.91,  4541.20,  4591.62,  4716.63,  5454.14],[])

Ac = Molecule("Acetaldehyde", 44., -153.830119460, [2.72923, 0.48351, 0.43371], [222.94,  729.92,  1121.87,  1285.63,  1636.17, 1646.79,  2018.97,  2080.76, 2143.85,  2157.44,  2651.18,  4169.12,  4379.22,  4459.71,  4553.14],[])

Hydrogen = Molecule("Hydrogen", 2.01565, -1.17548235778, [87.18829, 0., 0.], [6402.62], [])

T = np.linspace(500,1500,500)

#
# Ethane thermochemistry
# 

plt.figure()
plt.plot(T,np.log(Ethane.qtrans(T)),label="trans")
plt.plot(T,np.log(Ethane.qrot(T)),label="rot")
plt.plot(T,np.log(Ethane.qvib(T)),label="vib")
plt.xlabel('Temperature (K)')
plt.ylabel('ln q')
plt.title('Partition functions vs temperature')
plt.legend()
plt.savefig('./Images/ethane-partition.png')

AtransEthane = A(Ethane.qtrans(T))
ArotEthane = A(Ethane.qrot(T))
AvibEthane = A(Ethane.qvib(T))

plt.figure()
plt.plot(T,AtransEthane*eVtokJ,label="trans")
plt.plot(T,ArotEthane*eVtokJ,label="rot")
plt.plot(T,AvibEthane*eVtokJ,label="vib")
plt.xlabel('Temperature (K)')
plt.ylabel('Helmholtz (kJ/mol)')
plt.title('Helmholtz contributions vs temperature')
plt.legend()
plt.savefig('./Images/ethane-helmholtz.png')

UtransEthane = Ethane.Utrans(T)
UrotEthane = Ethane.Urot(T)
UvibEthane = Ethane.Uvib(T)

plt.figure()
plt.plot(T,UtransEthane*eVtokJ,label="trans")
plt.plot(T,UrotEthane*eVtokJ,label="rot")
plt.plot(T,UvibEthane*eVtokJ,label="vib")
plt.xlabel('Temperature (K)')
plt.ylabel('Internal Energy (kJ/mol)')
plt.title('Internal energy contributions vs temperature')
plt.legend()
plt.savefig('./Images/ethane-energy.png')

StransEthane=S(AtransEthane,UtransEthane,T)
SrotEthane=S(ArotEthane,UrotEthane,T)
SvibEthane=S(AvibEthane,UvibEthane,T)

plt.figure()
plt.plot(T,StransEthane*eVtokJ*1000.,label="trans")
plt.plot(T,SrotEthane*eVtokJ*1000.,label="rot")
plt.plot(T,SvibEthane*eVtokJ*1000.,label="vib")
plt.xlabel('Temperature (K)')
plt.ylabel('Entropy (J/mol K)')
plt.title('Entropy contributions vs temperature')
plt.legend()
plt.savefig('./Images/ethane-entropy.png')


#
# Ethane dehydrogenation at 1 bar
#
stdconc = (1e5/(R0*T)) # (1 bar/ R T) = mol/m3

nu = np.array([-1,1,1])

dUtrans = Delta(nu,np.array([Ethane.Utrans(T),Ethylene.Utrans(T),Hydrogen.Utrans(T)]))
dUrot =   Delta(nu,np.array([Ethane.Urot(T),Ethylene.Urot(T),Hydrogen.Urot(T)]))
dUvib =   Delta(nu,np.array([Ethane.Uvib(T),Ethylene.Uvib(T),Hydrogen.Uvib(T)]))

deltaE0 = Delta(nu,np.array([Ethane.energy,Ethylene.energy,Hydrogen.energy]))*autoeV
deltaZPE = Delta(nu,np.array([Ethane.ZPE(),Ethylene.ZPE(),Hydrogen.ZPE()]))

deltaU = dUtrans + dUrot + dUvib + deltaE0 + deltaZPE

plt.figure()
plt.plot(T,dUtrans*eVtokJ,label="Utrans")
plt.plot(T,dUrot*eVtokJ,label="Urot")
plt.plot(T,dUvib*eVtokJ,label="Uvib")
plt.plot([500,1500],[deltaZPE*eVtokJ,deltaZPE*eVtokJ],label="ZPE")
plt.plot([500,1500],[deltaE0*eVtokJ,deltaE0*eVtokJ],label="E0")
plt.plot(T,deltaU*eVtokJ,label="Utotal")
# plt.plot(T,deltaA*eVtokJ,label="Atotal")
plt.xlabel('Temperature (K)')
plt.ylabel('Energy (kJ/mol)')
plt.title('Ethane Dehydrogenation Reaction Energy Contributions')
plt.legend()

plt.savefig('./Images/dehydro-energy.png')

Atransethane = A(Ethane.qtrans(T)) + k * T * np.log(stdconc/1.)   # 1 bar standard state
Arotethane = A(Ethane.qrot(T))
Avibethane = A(Ethane.qvib(T))

Atransethylene = A(Ethylene.qtrans(T)) + k * T * np.log(stdconc/1.)   # 1 bar standard state
Arotethylene = A(Ethylene.qrot(T))
Avibethylene = A(Ethylene.qvib(T))

Atranshydrogen = A(Hydrogen.qtrans(T)) + k * T * np.log(stdconc/1.)   # 1 bar standard state
Arothydrogen = A(Hydrogen.qrot(T))
Avibhydrogen = A(Hydrogen.qvib(T))

Stransethane = S(Atransethane,Ethane.Utrans(T),T)
Srotethane =   S(Arotethane,Ethane.Urot(T),T)
Svibethane =   S(Avibethane,Ethane.Uvib(T),T)

Stransethylene = S(Atransethylene,Ethylene.Utrans(T),T)
Srotethylene =   S(Arotethylene,Ethylene.Urot(T),T)
Svibethylene =   S(Avibethylene,Ethylene.Uvib(T),T)

Stranshydrogen = S(Atransethylene,Hydrogen.Utrans(T),T)
Srothydrogen =   S(Arothydrogen,Hydrogen.Urot(T),T)
Svibhydrogen =   S(Avibhydrogen,Hydrogen.Uvib(T),T)

dStrans = Delta(nu,np.array([Stransethane,Stransethylene,Stranshydrogen]))
dSrot   = Delta(nu,np.array([Srotethane,Srotethylene,Srothydrogen]))
dSvib = Delta(nu,np.array([Svibethane,Svibethylene,Svibhydrogen]))

deltaS = dStrans + dSrot + dSvib

plt.figure()
plt.plot(T,dStrans*eVtokJ*1000.,label="trans")
plt.plot(T,dSrot*eVtokJ*1000.,label="rot")
plt.plot(T,dSvib*eVtokJ*1000.,label="vib")
plt.plot(T,deltaS*eVtokJ*1000.,label="total")

plt.xlabel('Temperature (K)')
plt.ylabel('Entropy (J/K)')
plt.title('Ethane Dehydrogenation Reaction Entropy Contributions')
plt.legend()

plt.savefig('./Images/dehydro-entropy.png')

plt.figure()

Aethane = A(Ethane.qtrans(T)) + A(Ethane.qrot(T)) + A(Ethane.qvib(T)) # 1 mol/m3 standard state
Aethane = Aethane + k * T * np.log(stdconc/1.) 
Uethane = Ethane.Utrans(T) + Ethane.Urot(T) + Ethane.Uvib(T)
Sethane = S(Aethane,Uethane,T)
Gethane = Aethane + k * T 

Aethylene = A(Ethylene.qtrans(T)) + A(Ethylene.qrot(T)) + A(Ethylene.qvib(T))
Aethylene = Aethylene + k * T * np.log(stdconc/1.)
Uethylene = Ethylene.Utrans(T) + Ethylene.Urot(T) + Ethylene.Uvib(T)
Sethylene = S(Aethylene,Uethylene,T)
Gethylene = Aethylene + k * T 

Ahydrogen = A(Hydrogen.qtrans(T)) + A(Hydrogen.qrot(T)/2.) + A(Hydrogen.qvib(T))
Ahydrogen = Ahydrogen + k * T * np.log(stdconc/1.)
Uhydrogen = Hydrogen.Utrans(T) + Hydrogen.Urot(T) + Hydrogen.Uvib(T)
Shydrogen = S(Ahydrogen,Uhydrogen,T)
Ghydrogen = Ahydrogen + k * T 

deltaE0 = (Ethylene.energy + Hydrogen.energy - Ethane.energy)*autoeV + (Ethylene.ZPE() + Hydrogen.ZPE() - Ethane.ZPE())
deltaU = (Uethylene + Uhydrogen - Uethane) + deltaE0
deltaS = (Sethylene + Shydrogen - Sethane)
deltaA = (Aethylene + Ahydrogen - Aethane) + deltaE0
deltaG = (Gethylene + Ghydrogen - Gethane) + deltaE0


plt.figure()
plt.plot(T,deltaU*eVtokJ,label="delta U")
plt.plot(T,T*deltaS*eVtokJ,label="T delta S")
plt.plot(T,k*T*eVtokJ,label="delta PV")
plt.plot(T,deltaG*eVtokJ,label="delta G")
plt.xlabel('Temperature (K)')
plt.ylabel('Energy (kJ/mol)')
plt.title('Ethane to Ethylene Plus Hydrogen Free Energy Contributions')
plt.legend()

plt.savefig('./Images/deyhdro.png')

Kp = np.exp(-deltaG/(k*T))

def equil(y):
    return y * y - K*(1-y)

old = 0.5
x = np.array([])
for K in Kp: 
    xi = fsolve(equil,old)
    old = xi
    print(xi)
    np.append(x,[xi])

print(x)

# plt.figure()

# plt.plot(T,x,label="Ethylene, Hydrogen")
# plt.plot(T,x,label="Ethane")
# plt.title("Equilibrium partial pressures at 1 bar")
# plt.xlabel('Temperature (K)')
# plt.ylabel('Partial Pressure')
# plot.legend()

# plt.savefig('./Images/equilibrium.png')

#
# Vinyl alcohol to acetaldehyde
#

AtransVA = A(VA.qtrans(T))
ArotVA = A(VA.qrot(T))
AvibVA = A(VA.qvib(T))
VA.helmholtz = AtransVA + ArotVA + AvibVA
UtransVA=VA.Utrans(T)
UrotVA = VA.Urot(T)
UvibVA = VA.Uvib(T)

AtransAc = A(Ac.qtrans(T))
ArotAc = A(Ac.qrot(T))
AvibAc = A(Ac.qvib(T))
Ac.helmholtz = AtransAc + ArotAc + AvibAc
UtransAc = Ac.Utrans(T)
UrotAc = Ac.Urot(T)
UvibAc = Ac.Uvib(T)

deltaStrans = S(AtransAc,UtransAc,T) - S(AtransVA,UtransVA,T)
deltaSrot = S(ArotAc,UrotAc,T) - S(ArotVA,UrotVA,T)
deltaSvib = S(AvibAc,UvibAc,T) - S(AvibVA,UvibVA,T)

deltaS = deltaStrans + deltaSrot + deltaSvib

plt.figure()
plt.plot(T,deltaStrans*eVtokJ*1000.,label="trans")
plt.plot(T,deltaSrot*eVtokJ*1000.,label="rot")
plt.plot(T,deltaSvib*eVtokJ*1000.,label="vib")
plt.plot(T,deltaS*eVtokJ*1000.,label="total")

plt.xlabel('Temperature (K)')
plt.ylabel('Entropy (J/K)')
plt.title('Vinyl Acetate to Acetaldehyde Reaction Entropy Contributions')
plt.legend()

plt.savefig('./Images/rxn-entropy.png')

plt.figure()

deltaUtrans = UtransAc - UtransVA
deltaUrot = UrotAc - UrotVA
deltaUvib = UvibAc - UvibVA
deltaZPE = Ac.ZPE() - VA.ZPE()
deltaE =   (Ac.energy - VA.energy)*autoeV

deltaU = deltaE + deltaZPE + deltaUvib + deltaUrot
deltaA = (Ac.helmholtz -VA.helmholtz) + deltaE + deltaZPE

plt.plot(T,deltaUtrans*eVtokJ,label="Utrans")
plt.plot(T,deltaUrot*eVtokJ,label="Urot")
plt.plot(T,deltaUvib*eVtokJ,label="Uvib")
plt.plot([200,1200],[deltaZPE*eVtokJ,deltaZPE*eVtokJ],label="ZPE")
plt.plot([200,1200],[deltaE*eVtokJ,deltaE*eVtokJ],label="E0")
plt.plot(T,deltaU*eVtokJ,label="Utotal")
# plt.plot(T,deltaA*eVtokJ,label="Atotal")
plt.xlabel('Temperature (K)')
plt.ylabel('Energy (kJ/mol)')
plt.title('Vinyl acetate to Acetaldehyde Reaction Energy Contributions')
plt.legend()

plt.savefig('./Images/rxn-energy.png')

plt.figure()
plt.plot(T,deltaU*eVtokJ,label="delta U")
plt.plot(T,T*deltaS*eVtokJ,label="T delta S")
plt.plot(T,deltaA*eVtokJ,label="delta A")
plt.xlabel('Temperature (K)')
plt.ylabel('Energy (kJ/mol)')
plt.title('Vinyl acetate to Acetaldehyde Free Energy Contributions')
plt.legend()

plt.savefig('./Images/rxn-helmholtz.png')

#+END_SRC

#+RESULTS:
#+begin_example
[1.53843881e-05]
[1.65489612e-05]
[1.77916118e-05]
[1.91168688e-05]
[2.05294805e-05]
[2.20344224e-05]
[2.3636906e-05]
[2.53423872e-05]
[2.71565757e-05]
[2.90854436e-05]
[3.11352349e-05]
[3.33124752e-05]
[3.56239813e-05]
[3.80768711e-05]
[4.06785742e-05]
[4.34368417e-05]
[4.63597572e-05]
[4.94557478e-05]
[5.27335948e-05]
[5.6202445e-05]
[5.98718225e-05]
[6.37516401e-05]
[6.78522115e-05]
[7.21842632e-05]
[7.6758947e-05]
[8.15878524e-05]
[8.66830196e-05]
[9.20569526e-05]
[9.77226319e-05]
[0.00010369]
[0.00010998]
[0.00011661]
[0.00012358]
[0.00013092]
[0.00013863]
[0.00014675]
[0.00015528]
[0.00016424]
[0.00017365]
[0.00018353]
[0.0001939]
[0.00020478]
[0.0002162]
[0.00022816]
[0.00024071]
[0.00025385]
[0.00026761]
[0.00028203]
[0.00029711]
[0.0003129]
[0.00032941]
[0.00034668]
[0.00036473]
[0.0003836]
[0.00040331]
[0.0004239]
[0.0004454]
[0.00046783]
[0.00049125]
[0.00051568]
[0.00054115]
[0.00056771]
[0.00059539]
[0.00062424]
[0.00065429]
[0.00068559]
[0.00071817]
[0.00075209]
[0.00078738]
[0.00082409]
[0.00086228]
[0.00090198]
[0.00094326]
[0.00098615]
[0.00103071]
[0.001077]
[0.00112507]
[0.00117498]
[0.00122677]
[0.00128053]
[0.00133629]
[0.00139413]
[0.0014541]
[0.00151627]
[0.00158072]
[0.00164749]
[0.00171667]
[0.00178833]
[0.00186252]
[0.00193934]
[0.00201885]
[0.00210113]
[0.00218625]
[0.00227431]
[0.00236537]
[0.00245952]
[0.00255685]
[0.00265744]
[0.00276137]
[0.00286875]
[0.00297966]
[0.00309419]
[0.00321244]
[0.0033345]
[0.00346048]
[0.00359046]
[0.00372456]
[0.00386288]
[0.00400552]
[0.00415259]
[0.0043042]
[0.00446046]
[0.00462148]
[0.00478738]
[0.00495828]
[0.00513428]
[0.00531552]
[0.00550212]
[0.00569419]
[0.00589187]
[0.00609528]
[0.00630455]
[0.00651982]
[0.00674121]
[0.00696887]
[0.00720294]
[0.00744354]
[0.00769083]
[0.00794494]
[0.00820602]
[0.00847423]
[0.0087497]
[0.0090326]
[0.00932307]
[0.00962127]
[0.00992735]
[0.01024149]
[0.01056382]
[0.01089453]
[0.01123378]
[0.01158172]
[0.01193854]
[0.0123044]
[0.01267947]
[0.01306394]
[0.01345796]
[0.01386174]
[0.01427543]
[0.01469924]
[0.01513333]
[0.0155779]
[0.01603313]
[0.01649921]
[0.01697633]
[0.01746469]
[0.01796448]
[0.0184759]
[0.01899914]
[0.0195344]
[0.02008188]
[0.02064179]
[0.02121433]
[0.0217997]
[0.02239811]
[0.02300978]
[0.0236349]
[0.02427369]
[0.02492637]
[0.02559314]
[0.02627422]
[0.02696983]
[0.02768019]
[0.02840551]
[0.02914601]
[0.02990192]
[0.03067345]
[0.03146082]
[0.03226427]
[0.03308401]
[0.03392027]
[0.03477328]
[0.03564325]
[0.03653043]
[0.03743503]
[0.03835729]
[0.03929742]
[0.04025567]
[0.04123226]
[0.04222742]
[0.04324137]
[0.04427435]
[0.04532659]
[0.04639832]
[0.04748976]
[0.04860115]
[0.04973271]
[0.05088468]
[0.05205727]
[0.05325072]
[0.05446526]
[0.05570111]
[0.05695849]
[0.05823764]
[0.05953877]
[0.0608621]
[0.06220787]
[0.06357628]
[0.06496756]
[0.06638192]
[0.06781958]
[0.06928076]
[0.07076566]
[0.0722745]
[0.07380749]
[0.07536482]
[0.07694672]
[0.07855337]
[0.08018498]
[0.08184175]
[0.08352387]
[0.08523154]
[0.08696493]
[0.08872424]
[0.09050966]
[0.09232136]
[0.09415952]
[0.09602431]
[0.0979159]
[0.09983446]
[0.10178015]
[0.10375314]
[0.10575356]
[0.10778159]
[0.10983736]
[0.11192101]
[0.11403268]
[0.1161725]
[0.11834061]
[0.12053713]
[0.12276217]
[0.12501585]
[0.12729827]
[0.12960954]
[0.13194976]
[0.13431902]
[0.1367174]
[0.13914498]
[0.14160184]
[0.14408804]
[0.14660365]
[0.14914873]
[0.15172331]
[0.15432745]
[0.15696117]
[0.15962452]
[0.1623175]
[0.16504014]
[0.16779243]
[0.17057439]
[0.17338601]
[0.17622726]
[0.17909813]
[0.18199859]
[0.1849286]
[0.18788811]
[0.19087708]
[0.19389543]
[0.1969431]
[0.20002001]
[0.20312607]
[0.20626119]
[0.20942526]
[0.21261817]
[0.21583981]
[0.21909003]
[0.2223687]
[0.22567567]
[0.22901079]
[0.23237389]
[0.23576479]
[0.23918331]
[0.24262925]
[0.24610242]
[0.24960259]
[0.25312956]
[0.25668308]
[0.26026292]
[0.26386883]
[0.26750054]
[0.2711578]
[0.27484031]
[0.2785478]
[0.28227996]
[0.28603649]
[0.28981708]
[0.29362139]
[0.2974491]
[0.30129985]
[0.3051733]
[0.30906909]
[0.31298683]
[0.31692615]
[0.32088666]
[0.32486797]
[0.32886965]
[0.3328913]
[0.33693249]
[0.34099279]
[0.34507175]
[0.34916892]
[0.35328384]
[0.35741605]
[0.36156506]
[0.3657304]
[0.36991158]
[0.37410808]
[0.37831942]
[0.38254507]
[0.38678451]
[0.39103721]
[0.39530265]
[0.39958028]
[0.40386955]
[0.40816991]
[0.41248079]
[0.41680164]
[0.42113189]
[0.42547095]
[0.42981825]
[0.4341732]
[0.43853521]
[0.44290369]
[0.44727804]
[0.45165765]
[0.45604192]
[0.46043025]
[0.46482202]
[0.46921662]
[0.47361342]
[0.47801182]
[0.48241119]
[0.48681092]
[0.49121037]
[0.49560892]
[0.50000596]
[0.50440086]
[0.50879299]
[0.51318173]
[0.51756646]
[0.52194656]
[0.52632141]
[0.53069038]
[0.53505287]
[0.53940826]
[0.54375593]
[0.54809529]
[0.55242573]
[0.55674664]
[0.56105743]
[0.56535751]
[0.56964629]
[0.57392318]
[0.57818762]
[0.58243902]
[0.58667683]
[0.59090047]
[0.59510941]
[0.59930309]
[0.60348097]
[0.60764252]
[0.61178721]
[0.61591454]
[0.62002398]
[0.62411505]
[0.62818724]
[0.63224008]
[0.63627309]
[0.6402858]
[0.64427776]
[0.64824853]
[0.65219767]
[0.65612475]
[0.66002936]
[0.66391109]
[0.66776955]
[0.67160435]
[0.67541513]
[0.67920151]
[0.68296315]
[0.68669971]
[0.69041085]
[0.69409627]
[0.69775566]
[0.70138871]
[0.70499516]
[0.70857472]
[0.71212713]
[0.71565216]
[0.71914956]
[0.72261911]
[0.72606059]
[0.72947381]
[0.73285857]
[0.7362147]
[0.73954202]
[0.74284039]
[0.74610966]
[0.7493497]
[0.75256038]
[0.7557416]
[0.75889326]
[0.76201527]
[0.76510755]
[0.76817003]
[0.77120267]
[0.77420541]
[0.77717822]
[0.78012107]
[0.78303396]
[0.78591687]
[0.78876981]
[0.7915928]
[0.79438585]
[0.79714901]
[0.79988231]
[0.80258581]
[0.80525955]
[0.80790362]
[0.81051809]
[0.81310304]
[0.81565855]
[0.81818475]
[0.82068172]
[0.82314958]
[0.82558846]
[0.82799847]
[0.83037977]
[0.83273248]
[0.83505675]
[0.83735274]
[0.8396206]
[0.8418605]
[0.84407261]
[0.84625709]
[0.84841414]
[0.85054393]
[0.85264666]
[0.8547225]
[0.85677167]
[0.85879436]
[0.86079077]
[0.86276112]
[0.86470561]
[0.86662445]
[0.86851787]
[0.87038608]
[0.87222931]
[0.87404777]
[0.8758417]
[0.87761132]
[0.87935686]
[0.88107856]
[0.88277665]
[0.88445136]
[0.88610293]
[0.8877316]
[0.8893376]
[0.89092117]
[0.89248255]
[0.89402199]
[0.89553972]
[0.89703598]
[0.89851101]
[0.89996505]
[0.90139835]
[0.90281114]
[0.90420367]
[0.90557617]
[0.90692888]
[0.90826204]
[0.90957589]
[0.91087066]
[0.9121466]
[0.91340393]
[0.91464288]
[0.91586371]
[0.91706662]
[0.91825186]
[0.91941965]
[0.92057023]
[0.92170381]
[0.92282062]
[0.92392088]
[0.92500483]
[0.92607267]
[0.92712462]
[0.9281609]
[0.92918174]
[0.93018732]
[0.93117788]
[]
#+end_example

[[./Images/ethane-partition.png]]
[[./Images/ethane-helmholtz.png]]
[[./Images/ethane-energy.png]]
[[./Images/ethane-entropy.png]]
[[./Images/rxn-entropy.png]]
[[./Images/rxn-energy.png]]
[[./Images/rxn-helmholtz.png]]
[[./Images/deyhdro.png]]
[[./Images/dehydro-energy.png]]

[[./Images/dehydro-entropy.png]]
 [[./Images/equilibrium.png]]
